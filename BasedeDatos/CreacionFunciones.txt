-----
----- INSERTS
-----

create or replace function insertar_ilustrador(
		nombre varchar(255),
		rrss varchar(255),
		auditoriausuario varchar(30)
) returns void as
$$
begin
	insert into ilustrador (
		nombre,
		rrss,
		cantidadcartas,
		auditoriausuario,
		auditoriafecha
	) values (
		$1,$2,0,$3,NOW()
	);
end;
$$
language plpgsql;

create or replace function insertar_categoria(
		nombre varchar(255),
		auditoriausuario varchar(30)
) returns void as
$$
begin
	insert into categoria (
		nombre,
		auditoriausuario,
		auditoriafecha
	) values (
		$1,$2,NOW()
	);
end;
$$
language plpgsql;

create or replace function insertar_set(
		nombre varchar(255),
		nombreserie varchar(255),
		auditoriausuario varchar(30)
) returns void as
$$
begin
	insert into set (
		nombre,
		nombreserie,
		auditoriausuario,
		auditoriafecha
	) values (
		$1,$2,$3,NOW()
	);
end;
$$
language plpgsql;

create or replace function insertar_comentario(
		texto text,
		nombreusuario varchar(30),
		correo varchar(255),
		tipo varchar(1),
		idcarta varchar(10),
		idiomacarta varchar(255),
		estampadocarta varchar(255)
) returns void as
$$
begin
	insert into comentario (
		texto,
		nombreusuario,
		correo,
		tipo,
		idcarta,
		idiomacarta,
		estampadocarta,
		fecha
	) values (
		$1,$2,$3,$4,$5,$6,$7,NOW()
	);
end;
$$
language plpgsql;

create or replace function insertar_baraja(
		nombre varchar(30),
		usuario varchar(30),
		correo varchar(255),
		tipousuario varchar(1)
) returns void as
$$
begin
	insert into baraja (
		nombre,
		cantidadcartas,
		usuariobaraja,
		correobaraja,
		tipousuariobaraja
		) values (
		$1,0,$2,$3,$4);	
end;
$$
language plpgsql;

create or replace function insertar_carta_baraja_noenergia(
	idcarta varchar(10),
	idbaraja lista.id%type,
	estampadocarta varchar(255),
	idioma varchar(255),
	cantidad integer
) returns integer as
$$
declare
	aux integer;
  	resultado integer;
begin
	if exists(select i.idcarta,i.estampadocarta,i.idiomacarta from incluyebaraja as i where i.idcarta=$1 and i.estampadocarta=$3 and i.idiomacarta=$4) then
		select cantidadcopias from incluyebaraja as i where i.idcarta=$1 and i.idbaraja=$2 and i.estampadocarta=$3 and i.idiomacarta=$4 into aux;
		if ((aux+$5) <= 4) then
			update incluyebaraja set cantidadcopias=cantidad+aux where incluyebaraja.idcarta=$1 and incluyebaraja.idbaraja=$2 and incluyebaraja.estampadocarta=$3 and incluyebaraja.idiomacarta=$4;
			select sum(cantidadcopias) from incluyebaraja as i where i.idbaraja=$2 into aux;
			update baraja set cantidadcartas = aux where baraja.id=$2;
			resultado := 1;
		else
			resultado := 0;
		end if;
	else
		insert into incluyebaraja(
			idcarta,
			idbaraja,
			estampadocarta,
			idiomacarta,
			cantidadcopias
		) values (
			$1,$2,$3,$4,$5
		);
		select sum(i.cantidadcopias) from incluyebaraja as i where i.idbaraja=$2 into aux;
		update baraja set cantidadcartas = aux where baraja.id=$2;
		resultado := 1;
	end if;
  return resultado;
end;
$$
language plpgsql;

create or replace function insertar_carta_baraja_energia(
	idcarta varchar(10),
	idbaraja baraja.id%type,
	estampadocarta varchar(255),
	idioma varchar(255),
	cantidad int
) returns void as
$$
declare
	aux int;
begin
	if exists(select i.idcarta,i.estampadocarta,i.idiomacarta from incluyebaraja as i where i.idcarta=$1 and i.estampadocarta=$3 and i.idiomacarta=$4) then
		select cantidadcopias from incluyebaraja as i where i.idcarta=$1 and i.idbaraja=$2 and i.estampadocarta=$3 and i.idiomacarta=$4 into aux;
		update incluyebaraja set cantidadcopias=cantidad+aux where incluyebaraja.idcarta=$1 and incluyebaraja.idbaraja=$2 and incluyebaraja.estampadocarta=$3 and incluyebaraja.idiomacarta=$4;
		select sum(cantidadcopias) from incluyebaraja as i where i.idbaraja=$2 into aux;
		update baraja set cantidadcartas = aux where baraja.id=$2;
	else
		insert into incluyebaraja(
			idcarta,
			idbaraja,
			estampadocarta,
			idiomacarta,
			cantidadcopias
		) values (
			$1,$2,$3,$4,$5
		);
		select sum(i.cantidadcopias) from incluyebaraja as i where i.idbaraja=$2 into aux;
		update baraja set cantidadcartas = aux where baraja.id=$2;
	end if;
end;
$$
language plpgsql;

create or replace function insertar_usuario(
		nombreusuario varchar(30),
		nombrevisual varchar(30),
		clave varchar(255),
		correo varchar(255),
		avatar varchar(255),
		tipo varchar(1)
) returns void as
$$
begin
	insert into usuario (
		nombreusuario,
		nombrevisual,
		clave,
		correo,
		avatar,
		tipo
		) values (
		$1,$2,md5($3),$4,$5,$6);	
end;
$$
language plpgsql;

create or replace function insertar_serie(
	nombre varchar(255),
	usuario varchar(255)
) returns void as
$$
begin
	insert into serie (
		nombre,
		auditoriausuario,
		auditoriafecha
	) values (
		$1,$2,NOW()
	);
end;
$$
language plpgsql;


create or replace function insertar_carta(
		id varchar(10),
		nombre varchar(255),
		nombreset varchar(255),
		nombrecategoria varchar(255),
		nombreilustrador varchar(255),
		rareza varchar(255),
		marcaregulacion varchar(255),
		imagen varchar(255),
		idioma varchar(255),
		estampado varchar(255),
		auditoriausuario varchar(255)
) returns void as
$$
begin
	insert into carta (
		id,
		nombre,
		nombreset,
		nombrecategoria,
		nombreilustrador,
		rareza,
		marcaregulacion,
		imagen,
		idioma,
		estampado,
		auditoriausuario,
		auditoriafecha
	) values (
		$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,NOW()
	);
end;
$$
language plpgsql;

create or replace function insertar_lista(
		nombre varchar(30),
		usuario varchar(30),
		correo varchar(255),
		tipousuario varchar(1)
) returns void as
$$
begin
	insert into lista (
		nombre,
		cantidadcartas,
		usuariolista,
		correolista,
		tipousuariolista
		) values (
		$1,0,$2,$3,$4);	
end;
$$
language plpgsql;

create or replace function insertar_carta_lista(
	idcarta varchar(10),
	idlista lista.id%type,
	estampadocarta varchar(255),
	idioma varchar(255)
) returns void as
$$
begin
	insert into incluyelista(
		idcarta,
		idlista,
		estampadocarta,
		idiomacarta
	) values (
		$1,$2,$3,$4
	);
	update lista set cantidadcartas = (select count(*) as cantidadcartas from incluyelista as i where i.idlista=$2) where lista.id=$2;
end;
$$
language plpgsql;

----
---- BORRAR
----

create or replace function delete_ilustrador(
		nombre varchar(30)
) returns void as
$$
begin
	delete from ilustrador as i where i.nombre=$1;
end;
$$
language plpgsql;

create or replace function delete_categoria(
		nombre varchar(255)
) returns void as
$$
begin
	delete from categoria as c where c.nombre=$1;
end;
$$
language plpgsql;

create or replace function delete_set(
		nombre varchar(255)
) returns void as
$$
begin
	delete from set as s where s.nombre=$1;
end;
$$
language plpgsql;

create or replace function delete_comentario(
		id int
) returns void as
$$
begin
	delete from comentario as c where c.id=$1;
end;
$$
language plpgsql;

create or replace function delete_usuario(
		nombreusuario varchar(30),
		correo varchar(255),
		tipo varchar(1)
) returns void as
$$
begin
	delete from usuario as u where u.nombreusuario=$1 and u.correo=$2 and u.tipo=$3;
end;
$$
language plpgsql;

create or replace function delete_lista(
		id lista.id%type
) returns void as
$$
begin
	delete from lista as l where l.id=$1;
end;
$$
language plpgsql;

create or replace function delete_carta(
		id carta.id%type,
		idioma carta.idioma%type,
		estampado carta.estampado%type
) returns void as
$$
declare
	aux varchar(255);
begin
	select i.nombre into aux from ilustrador as i, carta as c where i.nombre = c.nombreilustrador and c.id=$1 and c.idioma=$2 and c.estampado=$3; 
	delete from carta as c where c.id=$1 and c.idioma=$2 and c.estampado=$3;
	update ilustrador as i set cantidadcartas=(select count(*) as cantidad from carta as c where c.nombreilustrador=aux) where i.nombre=aux;
end;
$$
language plpgsql;

create or replace function borrar_carta_lista(
	idcarta varchar(10),
	estampadocarta varchar(255),
	idiomacarta varchar(255),
	idlista lista.id%type
) returns void as
$$
begin
	delete from incluyelista as i where i.idcarta = $1 and i.estampadocarta=$2 and i.idiomacarta=$3 and i.idlista = $4;
	update lista set cantidadcartas = (select count(*) as cantidadcartas from incluyelista as i where i.idlista=$4) where lista.id=$4;
end;
$$
language plpgsql;

create or replace function delete_serie(
		nombre serie.nombre%type
) returns void as
$$
begin
	delete from serie as c where c.nombre=$1;
end;
$$
language plpgsql;

create or replace function delete_baraja(
		id baraja.id%type
) returns void as
$$
begin
	delete from baraja as b where b.id=$1;
end;
$$
language plpgsql;

create or replace function borrar_carta_baraja(
	idcarta varchar(10),
	estampadocarta varchar(255),
	idiomacarta varchar(255),
	idbaraja baraja.id%type,
	cantidad int
) returns void as
$$
declare
	copiasenbaraja int;
	cantidadfinal int;
begin
	select cantidadcopias from (select cantidadcopias from incluyebaraja as i where i.idcarta=$1 and i.estampadocarta=$2 and i.idiomacarta=$3 and i.idbaraja=$4) into copiasenbaraja;
	if ($5 < copiasenbaraja) then
		update incluyebaraja as i set cantidadcopias=(copiasenbaraja - $5) where i.idbaraja=$4 and i.idcarta=$1 and i.estampadocarta=$2 and i.idiomacarta=$3;
		cantidadfinal := (select sum(cantidadcopias) from incluyebaraja as i where i.idbaraja = $4);
		update baraja as b set cantidadcartas = cantidadfinal where b.id=$4;
	else
		delete from incluyebaraja as i where i.idcarta = $1 and i.estampadocarta=$2 and i.idiomacarta=$3 and i.idbaraja = $4;
		cantidadfinal := (select sum(cantidadcopias) from incluyebaraja as i where i.idbaraja = $4);
		if (cantidadfinal is NULL) then
			update baraja as b set cantidadcartas = 0 where b.id=$4;
		else
			update baraja as b set cantidadcartas = cantidadfinal where b.id=$4;
		end if;
	end if;
end;
$$
language plpgsql;

create or replace function delete_serie(
		nombre serie.nombre%type
) returns void as
$$
begin
	delete from serie as c where c.nombre=$1;
end;
$$
language plpgsql;

---
--- Mostrar
---

create or replace function mostrar_ilustradores(
	out nombre ilustrador.nombre%type,
	out rrss ilustrador.rrss%type,
	out cantidadcartas ilustrador.cantidadcartas%type
) returns setof record as
$$
begin
	return query select i.nombre, i.rrss, i.cantidadcartas from ilustrador i;
end;
$$
language plpgsql;

create or replace function mostrar_categorias(
	out nombre categoria.nombre%type
) returns setof varchar as
$$
begin
	return query select c.nombre from categoria c;
end;
$$
language plpgsql;

create or replace function mostrar_sets(
	out nombre set.nombre%type,
	out nombreserie set.nombreserie%type
) returns setof record as
$$
begin
	return query select s.nombre, s.nombreserie from set s;
end;
$$
language plpgsql;

create or replace function mostrar_comentarios(
	in idcarta carta.id%type,
	out idcomentario comentario.id%type,
	out texto comentario.texto%type,
	out nombreusuario comentario.nombreusuario%type,
	out fecha comentario.fecha%type
) returns setof record as
$$
begin
	return query select c.id, c.texto, c.nombreusuario, c.fecha from comentario as c where c.idcarta=$1;
end;
$$
language plpgsql;

create or replace function mostrar_usuarios(
	out nombreusuario usuario.nombreusuario%type,
	out nombrevisual usuario.nombrevisual%type,
	out correo usuario.correo%type,
	out avatar usuario.avatar%type,
	out tipo usuario.tipo%type
) returns setof record as
$$
begin
	return query select u.nombreusuario,u.nombrevisual,u.correo,u.avatar, u.tipo from usuario as u;
end;
$$
language plpgsql;

create or replace function mostrar_cartas(
	out id carta.id%type,
	out nombre carta.nombre%type,
	out nombreset carta.nombreset%type,
	out nombrecategoria carta.nombrecategoria%type,
	out nombreilustrador carta.nombreilustrador%type,
	out nombreserie serie.nombre%type,
	out rareza carta.rareza%type,
	out marcaregulacion carta.marcaregulacion%type,
	out imagen carta.imagen%type,
	out idioma carta.idioma%type,
	out estampado carta.estampado%type
) returns setof record as
$$
begin
	return query select c.id, 
						c.nombre, 
						c.nombreset, 
						c.nombrecategoria, 
						c.nombreilustrador,
						ser.nombre,
						c.rareza, 
						c.marcaregulacion, 
						c.imagen, 
						c.idioma, 
						c.estampado
						from carta as c, set as s, serie as ser where c.nombreset=s.nombre and s.nombreserie=ser.nombre;
end;
$$
language plpgsql;

create or replace function mostrar_listas(
	OUT id lista.id%type,
	OUT nombre lista.nombre%type,
	OUT cantidadcartas lista.cantidadcartas%type,
	OUT usuariolista lista.usuariolista%type
) returns setof record as
$$
begin
	return query select l.id,l.nombre,l.cantidadcartas,l.usuariolista from lista as l;
end;
$$
language plpgsql;

create or replace function mostrar_barajas(
	OUT id baraja.id%type,
	OUT nombre baraja.nombre%type,
	OUT cantidadcartas baraja.cantidadcartas%type,
	OUT usuariobaraja baraja.usuariobaraja%type
) returns setof record as
$$
begin
	return query select b.id,b.nombre,b.cantidadcartas,b.usuariobaraja from baraja as b;
end;
$$
language plpgsql;

create or replace function mostrar_contenido_lista(
	IN idbuscar lista.id%type,
	out id carta.id%type,
	out nombre carta.nombre%type,
	out nombreset carta.nombreset%type,
	out nombrecategoria carta.nombrecategoria%type,
	out nombreilustrador carta.nombreilustrador%type,
	out nombreserie serie.nombre%type,
	out rareza carta.rareza%type,
	out marcaregulacion carta.marcaregulacion%type,
	out imagen carta.imagen%type,
	out idioma carta.idioma%type,
	out estampado carta.estampado%type
) returns setof record as
$$
begin
	return query select c.id, 
						c.nombre, 
						c.nombreset, 
						c.nombrecategoria, 
						c.nombreilustrador,
						ser.nombre,
						c.rareza, 
						c.marcaregulacion, 
						c.imagen, 
						c.idioma, 
						c.estampado
						from carta c, incluyelista i, set as s, serie as ser
						where i.idlista=$1 and i.idcarta=c.id and i.idiomacarta=c.idioma and i.estampadocarta=c.estampado and c.nombreset=s.nombre and s.nombreserie=ser.nombre;
end;
$$
language plpgsql;

create or replace function mostrar_impresiones(
	in id_buscar carta.id%type,
  	out estampado carta.estampado%type
) returns setof varchar as
$$
begin
	return query (select c.estampado from carta as c where id=$1);
end;
$$
language plpgsql;

create or replace function mostrar_series(
	out nombre serie.nombre%type,
	out auditoriausuario serie.auditoriausuario%type,
	out auditoriafecha serie.auditoriafecha%type
) returns setof record as
$$
begin
	return query select c.nombre, c.auditoriausuario, c.auditoriafecha from serie as c;
end;
$$
language plpgsql;

create or replace function mostrar_contenido_baraja(
	IN idbuscar baraja.id%type,
	out id carta.id%type,
	out nombre carta.nombre%type,
	out nombreset carta.nombreset%type,
	out nombrecategoria carta.nombrecategoria%type,
	out nombreilustrador carta.nombreilustrador%type,
	out nombreserie serie.nombre%type,
	out rareza carta.rareza%type,
	out marcaregulacion carta.marcaregulacion%type,
	out imagen carta.imagen%type,
	out idioma carta.idioma%type,
	out estampado carta.estampado%type,
	OUT cantidadcopias incluyebaraja.cantidadcopias%type
) returns setof record as
$$
begin
	return query select c.id, 
						c.nombre, 
						c.nombreset, 
						c.nombrecategoria, 
						c.nombreilustrador,
						ser.nombre,
						c.rareza, 
						c.marcaregulacion, 
						c.imagen, 
						c.idioma, 
						c.estampado,
						i.cantidadcopias
						from carta c, incluyebaraja i, set as s, serie as ser
						where i.idbaraja=$1 and i.idcarta=c.id and i.idiomacarta=c.idioma and i.estampadocarta=c.estampado and c.nombreset=s.nombre and s.nombreserie=ser.nombre;
end;
$$
language plpgsql;

---
---Modificar
---
create or replace function modificar_atributos_usuario(
	nuevodato text,
	atributo text,
	id usuario.nombreusuario%type
) returns void as
$$
begin
	case atributo
		when 'nombreusuario' then
			update usuario as u set nombreusuario=cast($1 as varchar(30))
			where u.nombreusuario=$3;
		when 'nombrevisual' then 
			update usuario as u set nombrevisual=cast($1 as varchar(30))
			where u.nombreusuario=$3;
		when 'correo' then 
			update usuario as u set correo=cast($1 as varchar(255))
			where u.nombreusuario=$3;
		when 'avatar' then
			update usuario as u set avatar=cast($1 as varchar(255))
			where u.nombreusuario=$3;
		else
			raise notice 'Debe especificar un atributo';
	end case;
end;
$$
language plpgsql;

create or replace function modificar_atributos_lista(
	nuevodato text,
	atributo text,
	id lista.id%type
) returns void as
$$
begin
	case atributo
		when 'nombre' then
			update lista as l set nombre=cast($1 as varchar(30))
			where l.id=$3;
		else
			raise notice 'Debe especificar un atributo';
	end case;
end;
$$
language plpgsql;

create or replace function modificar_atributos_carta(
	nuevodato text,
	atributo text,
	id carta.id%type,
	idioma carta.idioma%type,
	estampado carta.estampado%type
) returns void as
$$
begin
	case atributo
		when 'id' then
			update carta as c set id=cast($1 as varchar(10))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'nombre' then
			update carta as c set nombre=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'set' then
			update carta as c set nombreset=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'rareza' then
			update carta as c set rareza=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'marcaregulacion' then
			update carta as c set marcaregulacion=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'ilustrador' then
			update carta as c set nombreilustrador=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'imagen' then
			update carta as c set imagen=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'idioma' then
			update carta as c set idioma=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'estampado' then
			update carta as c set estampado=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		when 'categoria' then
			update carta as c set nombrecategoria=cast($1 as varchar(255))
			where c.id=$3 and c.idioma=$4 and c.estampado=$5;
		else
			raise notice 'Debe especificar un atributo';
	end case;
end;
$$
language plpgsql;

create or replace function cambiar_nombre_lista(
  id_lista_cambiar lista.id%type, 
  nuevo_nombre lista.nombre%type
) returns void as
$$
begin
	update lista as l set nombre=$2
  where id=$1;
end;
$$
language plpgsql;

create or replace function cambiar_nombre_baraja(
  id_baraja_cambiar baraja.id%type, 
  nuevo_nombre baraja.nombre%type
) returns void as
$$
begin
	update baraja as b set nombre=$2
  where id=$1;
end;
$$
language plpgsql;

create or replace function cambiar_nombre_serie(
  nombre_serie_cambiar serie.nombre%type, 
  nuevo_nombre serie.nombre%type
) returns void as
$$
begin
	update serie as s set nombre=$2
  where nombre=$1;
end;
$$
language plpgsql;

create or replace function cambiar_nombre_set(
  nombre_set_cambiar set.nombre%type, 
  nuevo_nombre set.nombre%type
) returns void as
$$
begin
	update set as s set nombre=$2
  where nombre=$1;
end;
$$
language plpgsql;

create or replace function cambiar_nombre_categoria(
  nombre_categoria_cambiar categoria.nombre%type, 
  nuevo_nombre categoria.nombre%type
) returns void as
$$
begin
	update categoria as c set nombre=$2
  where nombre=$1;
end;
$$
language plpgsql;

create or replace function modificar_atributos_ilustrador(
	nuevodato text,
	atributo text,
	id ilustrador.nombre%type
) returns void as
$$
begin
	case atributo
		when 'nombre' then
			update ilustrador as i set nombre=cast($1 as varchar(30))
			where i.nombre=$3;
		when 'rrss' then
			update ilustrador as i set rrss=cast($1 as varchar(255))
			where i.nombre=$3;
		else
			raise notice 'Debe especificar un atributo';
	end case;
end;
$$
language plpgsql;

create or replace function modificar_atributos_set(
	nuevodato text,
	atributo text,
	id set.nombre%type
) returns void as
$$
begin
	case atributo
		when 'nombre' then
			update set as s set nombre=cast($1 as varchar(255))
			where s.nombre=$3;
		when 'nombreserie' then
			update set as s set nombreserie=cast($1 as varchar(255))
			where s.nombre=$3;
		else
			raise notice 'Debe especificar un atributo';
	end case;
end;
$$
language plpgsql;

create or replace function editar_comentario(
  idcomentario comentario.id%type, 
  nuevotexto comentario.texto%type
) returns void as
$$
begin
	update comentario as c set texto=$2
  where id=$1;
end;
$$
language plpgsql;


---
---BUSCAR
---
create or replace function buscar_carta_en_lista(
	idcarta carta.id%type,
  estampadocarta carta.estampado%type,
  idiomacarta carta.idioma%type,
  idlista lista.id%type
) returns int as 
$$
declare
	existe int;
begin
	select count(*) as cantidad from incluyelista as i where 
	i.idcarta=$1 and i.idlista=$4 and i.estampadocarta=$2 and i.idiomacarta=$3 into existe;
  if existe > 0 then
  	return 1;
  else
  	return 0;
  end if;
end;
$$
language plpgsql;

create or replace function buscar_serie(
	nombre serie.nombre%type
) returns int as 
$$
declare
	existe int;
begin
	select count(*) as cantidad from serie as c where 
	c.nombre=$1 into existe;
  if existe > 0 then
  	return 1;
  else
  	return 0;
  end if;
end;
$$
language plpgsql;

create or replace function buscar_set(
	nombre set.nombre%type
) returns int as 
$$
declare
	existe int;
begin
	select count(*) as cantidad from set as c where 
	c.nombre=$1 into existe;
  if existe > 0 then
  	return 1;
  else
  	return 0;
  end if;
end;
$$
language plpgsql;

create or replace function buscar_ilustrador(
	nombre ilustrador.nombre%type
) returns int as 
$$
declare
	existe int;
begin
	select count(*) as cantidad from ilustrador as c where 
	c.nombre=$1 into existe;
  if existe > 0 then
  	return 1;
  else
  	return 0;
  end if;
end;
$$
language plpgsql;

create or replace function buscar_categoria(
	nombre categoria.nombre%type
) returns int as 
$$
declare
	existe int;
begin
	select count(*) as cantidad from categoria as c where 
	c.nombre=$1 into existe;
  if existe > 0 then
  	return 1;
  else
  	return 0;
  end if;
end;
$$
language plpgsql;


create or replace function buscar_carta_en_sistema(
	idcarta carta.id%type,
	estampadocarta carta.estampado%type,
	idiomacarta carta.idioma%type
) returns int as 
$$
declare
	existe int;
begin
	select count(*) as cantidad from carta as c where 
	c.id=$1 and c.estampado=$2 and c.idioma=$3 into existe;
  if existe > 0 then
  	return 1;
  else
  	return 0;
  end if;
end;
$$
language plpgsql;


create or replace function check_limite_barajas(
	idbaraja baraja.id%type
) returns int as
$$
begin
	if (select cantidadcartas from baraja where id=$1) < 60 then
		return 1; 
	else
		return 0;
	end if;
end;
$$
language plpgsql;

create or replace function buscar_usuario_en_sistema(
	nombreusuariobuscar usuario.nombreusuario%type,
	correobuscar usuario.correo%type,
	tipousuariobuscar usuario.tipo%type
) returns int as 
$$
declare
	existe int;
begin
	select count(*) as cantidad from usuario as u where 
	u.nombreusuario=$1 and u.correo=$2 and u.tipo=$3 into existe;
  if existe > 0 then
  	return 1;
  else
  	return 0;
  end if;
end;
$$
language plpgsql;

create or replace function actualizar_cantidad_cartas_ilustradores()
returns trigger as
$$
declare
	t_curs cursor for select * from ilustrador;
  t_row ilustrador%rowtype;
begin

for t_row in t_curs
	loop
  	update ilustrador as i set cantidadcartas=(select count(*) as cantidad from carta as c where c.nombreilustrador=t_row.nombre) where i.nombre=t_row.nombre;
 	end loop;
return null;
end;
$$
language plpgsql;

create or replace trigger cantidad_cartas_ilustrador_trigger
after update or delete or insert on carta
execute function actualizar_cantidad_cartas_ilustradores();